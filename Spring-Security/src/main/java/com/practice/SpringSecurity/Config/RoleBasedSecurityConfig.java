//package com.practice.SpringSecurity.Config;
//
//import com.practice.SpringSecurity.Filter.CsrfCookieFilter;
//import jakarta.servlet.http.HttpServletRequest;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.config.Customizer;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.web.SecurityFilterChain;
//import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
//import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
//import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;
//import org.springframework.web.cors.CorsConfiguration;
//import org.springframework.web.cors.CorsConfigurationSource;
//
//import java.util.Collections;
//
//@Configuration
//@EnableWebSecurity
//public class RoleBasedSecurityConfig {
//
//    /**
//     * custom ROLE based security configuration
//     * Add "ROLE_" before authorities in db to do ROLE_BASED authentication
//     */
//    @Bean
//    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
//
//        CsrfTokenRequestAttributeHandler requestAttributeHandler = new CsrfTokenRequestAttributeHandler();
//        requestAttributeHandler.setCsrfRequestAttributeName("_csrf");
//        http
//                /**
//                 * When we will login through an frontend UI application. Then we can use the below commented configuration.
//                 * When we login through our browser there is a JSESSION_ID generated by our browser.But after implementing frontend application we have to do it by own.
//                 * So by this configuration we telling spring framework that always generate a JSESSION_ID after as successful login and send it to the UI application, so that it can handle the login.
//                 */
//                /*.securityContext().requireExplicitSave(false)
//                .and().sessionManagement(session->session.sessionCreationPolicy(SessionCreationPolicy.ALWAYS))*/
//
//                /**
//                 * Configuration for cross-origin-resource-sharing(CORS) access.
//                 */
//                .cors().configurationSource(new CorsConfigurationSource() {
//                    @Override
//                    public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {
//                        CorsConfiguration config = new CorsConfiguration();
//                        config.setAllowedOrigins(Collections.singletonList("http://localhost:9337"));
//                        config.setAllowedMethods(Collections.singletonList("*"));
//                        config.setAllowCredentials(true);
//                        config.setAllowedHeaders(Collections.singletonList("*"));
//                        config.setMaxAge(3600L);
//                        return config;
//                    }
//                }).and()
//                /**
//                 * Configuration for cross-site-request-furgery(CSRF) access.
//                 */
//                //By this configuration we are disabling csrf only for the below-mentioned endpoints.
//                .csrf((csrf)->csrf.csrfTokenRequestHandler(requestAttributeHandler).ignoringRequestMatchers("/register")
//                        //By this configuration we are telling spring framework to generate CSRF token and save in the repository withHttpOnlyFalse(It will allow UI application to read our cookie.)
//                        .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()))
//                //It is filter configuration provided in order to send csrf token in each and every request.
//                .addFilterAfter(new CsrfCookieFilter(), BasicAuthenticationFilter.class)
//                .authorizeHttpRequests((request)->request
//                        .requestMatchers("/myAccount","/test-account").hasRole("VIEW_ACCOUNT")
//                        .requestMatchers("/myCards","/test-cards").hasRole("VIEW_CARDS")
//                        .requestMatchers("/myLoans","/test-loans").hasRole("VIEW_LOANS")
//                        .requestMatchers("/myBalance","/test-balance").hasAnyRole("VIEW_ACCOUNT","VIEW_BALANCE")
//                        .anyRequest().permitAll()
//                )
//                .httpBasic(Customizer.withDefaults())
//                .formLogin(Customizer.withDefaults());
//        return http.build();
//    }
//
//    @Bean
//    public PasswordEncoder passwordEncoder(){
//        return new BCryptPasswordEncoder();
//    }
//}
//
